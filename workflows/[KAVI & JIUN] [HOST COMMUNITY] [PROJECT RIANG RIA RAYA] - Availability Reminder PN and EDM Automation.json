{
  "active": false,
  "connections": {
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Avai Reminder Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Avai Reminder Query": {
      "main": [
        [
          {
            "node": "LP API - Send PN",
            "type": "main",
            "index": 0
          },
          {
            "node": "SIB API - Avai Reminder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-03-28T02:41:03.595Z",
  "id": "52",
  "name": "[KAVI & JIUN] [HOST COMMUNITY] [PROJECT RIANG RIA RAYA] - Availability Reminder PN and EDM Automation",
  "nodes": [
    {
      "parameters": {
        "content": "## Availability Reminder Workflow\n",
        "height": 91.35426361250266,
        "width": 300.6636740168579
      },
      "id": "4ff217e3-fab0-4a29-a220-247a2e006e3b",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        300,
        -160
      ]
    },
    {
      "parameters": {
        "functionCode": "const staticData = getWorkflowStaticData('global');\nconst newListingIds = items.map(item => item.json[\"id\"]);\nconst oldListingIds = staticData.oldListingIds; \n\nif (!oldListingIds) {\n  staticData.oldListingIds = newListingIds;\n  return items;\n}\n\n\nconst ActualNewListingIds = newListingIds.filter((id) => !oldListingIds.includes(id));\nconst actualNewListing = items.filter((data) => ActualNewListingIds.includes(data.json['id']));\nstaticData.oldListingIds = [...ActualNewListingIds, ...oldListingIds];\n\nreturn actualNewListing;"
      },
      "name": "Function1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1100,
        140
      ],
      "id": "2b309b20-e373-44c8-8f77-357a5e966ad8",
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "daysInterval": 3,
              "triggerAtHour": 12
            }
          ]
        }
      },
      "id": "9d883bc7-7dd4-4f12-8d31-bcde65756477",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        680,
        -160
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.leanplum.com/api?action=startCampaign",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={ \"appId\" : \"app_BXrjE7dc15VWXDLRfh77tActhBhSkCHeQhETDE1mXfQ\", \"clientKey\" : \"dev_L9yBjOmwfR3fNiVjL9woIYfWzsy5hMcGDx0og8isAFw\", \"apiVersion\" : \"1.0.6\", \"userId\":\"{{ $json[\"uuid\"] }}\", \"campaignId\":\"6269038683029504\", \"createDisposition\" : \"CreateNever\"}",
        "headerParametersJson": "={\"accept\": \"application/json\",\"content-type\": \"application/json\"}"
      },
      "name": "LP API - Send PN",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1440,
        -60
      ],
      "id": "bdd846cc-299d-4df3-b24f-b52f34f68f73"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1gn-IkSCx1U3MalPpf6pSyvsC71QgxdF5XZ-xsWcQtZY",
          "mode": "list",
          "cachedResultName": "Riang Ria Raya Opt-In Form (Responses)",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gn-IkSCx1U3MalPpf6pSyvsC71QgxdF5XZ-xsWcQtZY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2055962237,
          "mode": "list",
          "cachedResultName": "Registration No",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1gn-IkSCx1U3MalPpf6pSyvsC71QgxdF5XZ-xsWcQtZY/edit#gid=2055962237"
        },
        "options": {}
      },
      "id": "a653f086-acb0-46e0-bf6b-561d59317b5b",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        860,
        -160
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "19",
          "name": "Google Sheet - Jiun's Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SET TIMEZONE = 'Asia/Kuala_Lumpur';\n\nselect distinct l.id, \nl.registration_no, \ncase when ht.host_type is null then 'Organic' else ht.host_type end as host_type,\nm.name as model,\ncase when ll.city_id in (1) then '1. KV'   \nwhen ll.city_id in (2,12) then '2. PG'\nwhen ll.city_id in (3,19,20,21) then '3. KK'  \nwhen ll.city_id in (4,15) then '4. JB' \nwhen ll.city_id in (5) then '5. IP' \nwhen ll.city_id in (47) then '6. NS'\nwhen ll.city_id in (13) then '7. LGK'\nelse '8. Others' end as city,\nl.user_id, \nconcat(u.first_name, ' ',u.last_name)as host_name, \nu.email, \nu.uuid,\nu.phone_number,\nla.avai_days\nfrom listings l \nleft join users u on u.id = l.user_id\nleft join (select distinct listing_id, country, city_id from listing_location) ll on ll.listing_id = l.id\nleft join models m on m.id = l.model_id\nleft join companies c on c.owner_id = l.user_id\n--\nleft join \n        (select l.id,\n        count(dates.ymd) as avai_days\n        from listings l\n        left join listing_availability la on la.listing_id=l.id\n        left join (SELECT generate_series(timestamp '2023-04-20', timestamp '2023-05-08', interval '1 day')::date ymd) dates on \n        dates.ymd between la.start_date::date and la.end_date::date\n        where l.status='approved' and l.deleted_at is null \n        GROUP BY 1)la\n        on la.id = l.id\n--\nleft join\n        (select distinct l.user_id, t.name as host_type\n        from listings l\n        left join tag_taggables tt on tt.taggable_id = l.user_id \n        left join tags t on t.id = tt.tag_id\n        where t.name ~* '(entrepreneur|commercial)')ht\n        on ht.user_id = l.user_id\n--\nwhere l.status = 'approved'\nand l.deleted_at is null\n--and ((c.owner_id is null) or (l.user_id in (942862,344308,756223,31534,176936,551568,59693,120252,113801,483725,839440,760777,59551,58937,725875,797829,810417,1415199,1594773,50832,684922,1387955,548329,259352,81472,399266,79964,92561,93080,177014,89213,925742,758921,46071,1072616,1751078,82304)))\nand l.registration_no in ({{ $json[\"String\"] }})\nand la.avai_days < '19'\ngroup by 1,2,3,4,5,6,7,8,9,10,11\nhaving (case when ht.host_type is null then 'Organic' else ht.host_type end) != 'Commercial Host' ",
        "additionalFields": {}
      },
      "id": "3f16d600-69f8-470d-bd2b-680c3a09b229",
      "name": "Avai Reminder Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        1040,
        -160
      ],
      "credentials": {
        "postgres": {
          "id": "8",
          "name": "trevodb"
        }
      }
    },
    {
      "parameters": {
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "sendInBlueApi",
        "requestMethod": "POST",
        "url": "https://api.sendinblue.com/v3/smtp/email",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\"to\":[{\"email\":\"{{$json[\"email\"]}}\",\"name\":\"{{$json[\"host_name\"]}}\"}],\n\"templateId\":523,\"params\":{ \"CPHOSTNAME\":\"{{$json[\"host_name\"]}}\"}}\n\n",
        "headerParametersJson": "={\"accept\": \"application/json\",\"content-type\": \"application/json\"}"
      },
      "name": "SIB API - Avai Reminder",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1440,
        -240
      ],
      "id": "a03978f0-c5b0-4b29-8a36-ed071cdf949e",
      "retryOnFail": true,
      "credentials": {
        "sendInBlueApi": {
          "id": "7",
          "name": "SendInBlue"
        }
      },
      "continueOnFail": true
    }
  ],
  "pinData": {},
  "settings": {
    "callerPolicy": "any",
    "errorWorkflow": "11",
    "saveExecutionProgress": "DEFAULT"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrencyRules": []
    },
    "global": {
      "oldListingIds": [
        19217,
        20190,
        23254,
        27519,
        27551,
        32133,
        33151,
        35444,
        35561,
        36079,
        36365,
        36521,
        37333,
        38267,
        38439,
        39151,
        40735,
        40921,
        41127,
        41608,
        41724,
        41749,
        42137,
        42399,
        42707,
        42849,
        12899,
        19353,
        23956,
        26261,
        27750,
        28472,
        29017,
        31146,
        31379,
        33164,
        33615,
        33926,
        35551,
        36174,
        36585,
        37073,
        37713,
        37728,
        38029,
        38260,
        38434,
        38473,
        39563,
        39641,
        39660,
        39933,
        40012,
        40057,
        40116,
        40220,
        40301,
        40892,
        41136,
        41268,
        41270,
        41407,
        41682,
        42300,
        42343,
        42438,
        42662,
        42690,
        42743,
        34796,
        39374,
        41105,
        20054,
        36923,
        27043,
        19995,
        39889,
        26974,
        39701,
        38092,
        41642,
        18799,
        39734,
        1740,
        40531,
        36804,
        38580,
        26805,
        14675,
        34334,
        40629,
        21248,
        28915,
        41586,
        41148,
        41139,
        39738,
        35016,
        27715,
        39435,
        26309,
        35073,
        2038,
        36791,
        39062,
        37948,
        38875,
        30729,
        39692,
        32406,
        24942,
        40221,
        38458,
        38202,
        37568,
        32750,
        35103,
        41550,
        39269,
        37792,
        36274,
        35383,
        25601,
        12864,
        41012,
        37433,
        32621,
        33630,
        27474,
        38553,
        21778,
        2497,
        40593,
        28185,
        31155,
        35009,
        1167,
        41172,
        34700,
        17005,
        41974,
        39461,
        39439,
        40705,
        33820,
        10983,
        1266,
        39774,
        34695,
        40850,
        36282,
        35342,
        40760,
        1166,
        14683,
        840,
        37105,
        38286,
        40753,
        28301,
        32796,
        33760,
        40946,
        39536,
        39717,
        40502,
        36721,
        36427,
        36069,
        32385,
        40786,
        37724,
        37392,
        6871,
        41785,
        37198,
        31404,
        39170,
        37529,
        39371,
        39373,
        36415,
        36968,
        39960,
        19972,
        40670,
        17984,
        39343,
        40835,
        39622,
        30316,
        41135,
        31632,
        34878,
        38573,
        33659,
        41011,
        35567,
        38925,
        34917,
        40896,
        37706,
        39999,
        39279,
        9708,
        38912,
        33302,
        6107,
        29539,
        39837,
        38311,
        38218,
        28724,
        35373,
        9552,
        27319,
        848,
        28436,
        6,
        1,
        2,
        3,
        4,
        5,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
      ]
    },
    "node:Schedule Trigger1": {
      "recurrencyRules": [
        138
      ]
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2023-05-18T06:05:38.220Z",
  "versionId": "e2f28297-ee19-4384-9ab8-1e66bcf6d02e"
}